/**
 * Type Object containing document data to be set, base and extended paths, and options for auto generating
 * your document Id, and whether or not to merge passed data with existing data.
 * 
 * @param {string} basePath - Name of primary collection.
 * @param {string | Array} pathExtension - Slash-separated string or string[] to be used in assigning document Ids.
 * @param {*} data - Data to be set.
 * @param {boolean} autoGenId - Controls whether 'addDoc()' with an autogenerated document Id (truthy) or 'setDoc()' with 
 * a settable document Id, passed in 'pathExtension' is used (falsy). NOTE: Truthy value will override any attempted 'merge'.
 * @param {boolean} merge - Controls combination or full replacement of data. Truthy will combine existing and passed fields,
 * Falsy overwrites existing fields passed data. NOTE: Only available with autoGenId set to 'false'.
 */
export class FirebaseCreateOptions {
    constructor(basePath, pathExtension, data, autoGenId, merge) {
        this.basePath = basePath
        this.pathExtension = pathExtension instanceof Array ? pathExtension.join('/') : pathExtension
        this.data = data
        this.autoGenId = autoGenId
        this.merge = merge
    }
}

/**
 * Type Object assigning parameters for read options. Can access single document or entire collections through 'isCollection'
 * boolean.
 * 
 * @param {string} basePath - Name of primary collection
 * @param {string | Array} pathExtension - Slash-separated string or string[] to be used in assigning document Ids.
 * @param {boolean} isCollection - Condition to call 'getDoc()' or 'getDocs'.
 */
export class FirebaseReadOptions {
    constructor(basePath, pathExtension, isCollection) {
        this.basePath = basePath
        this.pathExtension = pathExtension instanceof Array ? pathExtension.join('/') : pathExtension
        this.isCollection = isCollection
    }
}

/**
 * Type Object assigning parameters for update options.
 * 
 * @param {string} basePath - Name of primary collection.
 * @param {string | Array} pathExtension - Slash-separated string or string[] to be used in assigning document Ids.
 * @param {*} newData - Value in variety of data structures to be updated. Can accept dotNotation.
 */
export class FirebaseUpdateOptions {
    constructor(basePath, pathExtension, newData) {
        this.basePath = basePath
        this.pathExtension = pathExtension instanceof Array ? pathExtension.join('/') : pathExtension
        this.newData = newData
    }
}

/**
 * Type Object assigning parameters for delete options. 'deleteCollection' is an expensive operation,
 * that includes reading all documents within the collection and deleting them individually.
 * 
 * @param {string} basePath - Name of primary collection.
 * @param {string | Array} pathExtension - Slash-separated string or string[] to be used in assigning document Ids.
 * @param {boolean} markForDelete - Option to update record with a 'deletedAt' field, to be handled in-app.
 * @param {boolean} deleteField - Options to delete a passed field from the document.
 * @param {boolean} documentDelete - Option to delete a single document, provided by the basePath and pathExtension.
 * @param {string | null} fieldToDelete - Key to be deleted within a document.
 */
export class FirebaseDeleteOptions {
    constructor(basePath, pathExtension, markForDelete, deleteField, documentDelete, fieldToDelete) {
        this.basePath = basePath
        this.pathExtension = pathExtension instanceof Array ? pathExtension.join('/') : pathExtension
        this.markForDelete = markForDelete
        this.deleteField = deleteField
        this.documentDelete = documentDelete
        this.fieldToDelete = fieldToDelete
    }
}
